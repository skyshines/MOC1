#include <iostream>
#include <vector>
#include <queue>
using namespace std;

class Edge {
	public:
    int src;
    int nbr;
    int wt;

    Edge(int src, int nbr, int wt) {
        this->src = src;
        this->nbr = nbr;
        this->wt = wt;
    }
};

class Pair {
	public:
    int v;
    string psf;
    int wsf;

    Pair(int v, string psf, int wsf) {
        this->v = v;
        this->psf = psf;
        this->wsf = wsf;
    }

    bool operator<(const Pair& o) const {
        return this->wsf > o.wsf; // Using '>' for min-heap
    }
};

int main() {
    int vtces;
    cin >> vtces;

    vector<Edge> graph[vtces];
    for (int i = 0; i < vtces; i++) {
	vector<Edge> v1;
        graph[i] = v1;
    }

    int edges;
    cin >> edges;
    for (int i = 0; i < edges; i++) {
        int v1, v2, wt;
        cin >> v1 >> v2 >> wt;
        graph[v1].push_back(new Edge(v1, v2, wt));
        graph[v2].push_back(new Edge(v2, v1, wt));
	cout << 1 << endl;
    }

    int src;
    cin >> src;

    vector<bool> visited(vtces, false);
    priority_queue<Pair> pq;
    pq.push(Pair(src, to_string(src), 0));

    while (!pq.empty()) {
        Pair rem = pq.top();
        pq.pop();

        if (visited[rem.v]) {
            continue;
        }
        visited[rem.v] = true;
        cout << rem.v << " via " << rem.psf << " @ " << rem.wsf << endl;

        for (Edge e : graph[rem.v]) {
            if (!visited[e.nbr]) {
                pq.push(Pair(e.nbr, rem.psf + to_string(e.nbr), rem.wsf + e.wt));
            }
        }
    }

    return 0;
}
/*

import java.io.*;

import java.util.*;

public class Main {
  static class Edge {
    int src;
    int nbr;
    int wt;

    Edge(int src, int nbr, int wt) {
      this.src = src;
      this.nbr = nbr;
      this.wt = wt;
    }
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    int vtces = Integer.parseInt(br.readLine());
    ArrayList< Edge>[] graph = new ArrayList[vtces];
    for (int i = 0; i < vtces; i++) {
      graph[i] = new ArrayList<>();
    }

    int edges = Integer.parseInt(br.readLine());
    for (int i = 0; i < edges; i++) {
      String[] parts = br.readLine().split(" ");
      int v1 = Integer.parseInt(parts[0]);
      int v2 = Integer.parseInt(parts[1]);
      int wt = Integer.parseInt(parts[2]);
      graph[v1].add(new Edge(v1, v2, wt));
      graph[v2].add(new Edge(v2, v1, wt));
    }

    int src = Integer.parseInt(br.readLine());
    boolean[] visited = new boolean[vtces];

    PriorityQueue< Pair> queue = new PriorityQueue<>();
    queue.add(new Pair(src, src + "", 0));

    while (queue.size() > 0) {
      Pair rem = queue.remove();

      if (visited[rem.v] == true) {
        continue;
      }
      visited[rem.v] = true;
      System.out.println(rem.v + " via " + rem.psf
                         + " @ " + rem.wsf);

      for (Edge e : graph[rem.v]) {
        if (visited[e.nbr] == false) {
          queue.add(new Pair(e.nbr,
                             rem.psf + e.nbr, rem.wsf + e.wt));
        }
      }
    }
  }

  static class Pair implements Comparable< Pair> {
    int v;
    String psf;
    int wsf;

    Pair(int v, String psf, int wsf) {
      this.v = v;
      this.psf = psf;
      this.wsf = wsf;
    }

    public int compareTo(Pair o) {
      return this.wsf - o.wsf;
    }
  }
}
*/